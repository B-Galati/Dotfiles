#!/bin/bash
# Based on https://github.com/jfrazelle/dotfiles/blob/master/.dockerfunc

docker_service() {
    local containerName=$1
    local RUNNING=$(docker inspect --format="{{ .State.Running }}" $containerName 2> /dev/null)

    case "$3" in
        stop)
            echo "Stoping container..."
            docker stop $containerName
        ;;

        rm)
            echo "Deleting container..."
            docker rm -fv $containerName
        ;;

        --help)
            echo "Usage: $containerName {start|stop|rm}"
            return 1
        ;;

        *)
            if [[ "$RUNNING" == "true" ]]; then
                echo "already running..."
                return 2
            fi

            if [[ "$RUNNING" == "false" ]]; then
                echo "starting container..."
                docker start $containerName
            else
                echo "running container..."
                eval "$2"
            fi
        ;;
    esac
}

plex() {
    if [ -z $PLEX_MEDIA_FOLDERS ]; then
        echo "Need to set PLEX_MEDIA_FOLDERS environment variable"
        return 3
    fi

    # Compatible bash/zsh
    # http://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash
    volumesArgs=''
    var=$PLEX_MEDIA_FOLDERS
    while [ "$var" ] ;do
        iter=${var%%;*}
        volumesArgs+="-v $iter:/data/$(basename $iter) "
        [ "$var" = "$iter" ] && \
            var='' || \
            var="${var#*;}"
    done

    docker_service "$0" "docker run -it -d \\
        -h plex-benoit \\
        -v $HOME/.config/plex:/config \\
        $volumesArgs \\
        -p 32400:32400 \\
        --name \"$0\" \\
        timhaak/plex" $@
}

steam() {
    docker_service "$0" "docker run \\
        -v /etc/localtime:/etc/localtime:ro \\
        -v /etc/machine-id:/etc/machine-id:ro \\
        -v /tmp/.X11-unix:/tmp/.X11-unix \\
        -v $XDG_RUNTIME_DIR/pulse:/run/user/1000/pulse \\
        -v /dev/shm:/dev/shm \\
        -v $HOME/.steam:/home/steam \\
        -e DISPLAY \\
        -e PULSE_SERVER=unix:$XDG_RUNTIME_DIR/pulse/native \\
        --device /dev/snd \\
        --device /dev/dri \\
        --group-add audio \\
        --group-add video \\
        --name \"$0\" \\
        tianon/steam" $@
}

redis-commander() {
    docker run -it --rm \
        -p 8081:8081 \
        --name "$0" \
        tenstartups/redis-commander \
        --redis-host $@
}

keepass2() {
    docker_service "$0" "docker run -it \\
        -v /tmp/.X11-unix:/tmp/.X11-unix \\
        -v $HOME/keepass:/home/keepass \\
        -v $HOME/.config/KeePass/KeePass.config.xml:/home/keepass/.config/KeePass/KeePass.config.xml \\
        -e DISPLAY \\
        --name \"$0\" \\
        benoitg/keepass2" $@
}

evernote() {
    docker_service "$0" "docker run -it  \\
        -v /tmp/.X11-unix:/tmp/.X11-unix \\
        -v $HOME/evernote_backup:/root/evernote \\
        -e DISPLAY \\
        --cpuset-cpus 0 \\
        --name \"$0\" \\
        benoitg/evernote" $@
}

cadvisor() {
    docker_service "$0" "docker run \\
        --volume=/:/rootfs:ro \\
        --volume=/var/run:/var/run:rw \\
        --volume=/sys:/sys:ro \\
        --volume=/var/lib/docker:/var/lib/docker:ro \\
        --publish=8080:8080 \\
        --detach=true \\
        --name=\"$0\" \\
        google/cadvisor:latest" $@
}

meteor() {
    docker run -it --rm \
        -v "$PWD":/app \
        --name "$0" \
        danieldent/meteor \
        meteor $@
}

composer() {
    docker run --rm -it \
        -v $PWD:/app \
        -v $SSH_AUTH_SOCK:/ssh-auth.sock \
        -v /etc/passwd:/etc/passwd:ro \
        -v /etc/group:/etc/group:ro \
        -v $HOME/.composer/cache:/tmp/cache \
        -u $(id -u):$(id -g) \
        -e SSH_AUTH_SOCK=/ssh-auth.sock \
        -e HTTP_PROXY \
        -e HTTPS_PROXY \
        --name "$0" \
        benoitg/php-tools composer $@
}

symfony() {
    docker run --rm -it \
        -v $PWD:/app \
        -v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK \
        -v /etc/passwd:/etc/passwd:ro \
        -v /etc/group:/etc/group:ro \
        -v $HOME/.composer:/composer \
        -u $(id -u):$(id -g) \
        -e SSH_AUTH_SOCK \
        -e HTTP_PROXY \
        -e HTTPS_PROXY \
        --name "$0" \
        benoitg/php-tools \
        symfony $@
}

phpunit() {
    docker run --rm -it \
        -u $(id -u):$(id -g) \
        -v $PWD:/app \
        --name "$0" \
        phpunit/phpunit $@
}

atoum() {
    docker run --rm -it \
        -v $PWD:/src \
        --name "$0" \
        atoum/atoum $@
}

ng() {
    docker run --rm -it \
        -v $PWD:/usr/src/app \
        -u $(id -u):$(id -g) \
        --name "$0" \
        benoitg/node-tools \
        ng $@
}

uglifyjs() {
    docker run --rm -it \
        -v $PWD:/usr/src/app \
        -u $(id -u):$(id -g) \
        --name "$0" \
        benoitg/node-tools \
        uglifyjs $@
}

npm() {
    docker run --rm -it \
        -v $PWD:/usr/src/app \
        -v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK \
        -u $(id -u):$(id -g) \
        -e SSH_AUTH_SOCK \
        -e HTTP_PROXY \
        -e HTTPS_PROXY \
        --name "$0" \
        benoitg/node-tools \
        npm $@
}


yarn() {
    docker run --rm -it \
        -v $PWD:/usr/src/app \
        -v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK \
        -u $(id -u):$(id -g) \
        -e SSH_AUTH_SOCK \
        -e HTTP_PROXY \
        -e HTTPS_PROXY \
        --name "$0" \
        benoitg/node-tools \
        yarn $@
}

tslint() {
    docker run --rm -it \
        -v $PWD:/usr/src/app \
        -v $HOME/tslint.json:/home/node/tslint.json \
        -u $(id -u):$(id -g) \
        --name "$0" \
        benoitg/node-tools \
        tslint $@
}

phpsa() {
    docker run -it --rm \
        -u $(id -u):$(id -g) \
        -v $PWD:/app \
        --name "$0" \
        benoitg/php-tools \
        phpsa $@
}

phan() {
    docker run -it --rm \
        -u $(id -u):$(id -g) \
        -v $PWD:/app \
        --name "$0" \
        benoitg/php-tools \
        phan $@
}

skype() {
    docker_service "$0" "docker run \\
        -v /tmp/.X11-unix:/tmp/.X11-unix \\
    	-v $HOME/.skypeforlinux:/root/.config/skypeforlinux \
    	-e DISPLAY \\
        --device /dev/video0 \\
        --device /dev/snd \\
        --device /dev/dri \\
        --group-add audio \\
        --group-add video \\
    	--name \"$0\" \\
    	benoitg/skype" $@
}

spotify() {
    docker_service "$0" "docker run -d \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY \
		-e QT_DEVICE_PIXEL_RATIO=2 \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/dri \
		--group-add audio \
		--group-add video \
		--name \"$0\" \
		jess/spotify" $@
}

redis-desktop-manager() {
    docker run  -it --rm \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/.rdm:/root/.rdm \
        -e DISPLAY \
        -e SSH_AUTH_SOCK \
        -v $SSH_AUTH_SOCK:$SSH_AUTH_SOCK \
        --device /dev/dri \
        --name "$0" \
        benoitg/redis-desktop-manager $@
}

teamviewer() {
    docker_service "$0" "docker run -d \
        -e DISPLAY \
        -e XAUTHORITY \
        -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
        --name \"$0\" \
        hurricane/teamviewer \
        teamviewer" $@
}

portainer() {
    docker_service "$0" "docker run -d \
        --restart=always \
        -p 9010:9000 \
        -v /var/run/docker.sock:/var/run/docker.sock \
        --name \"$0\" \
        portainer/portainer" $@
}

dns-gen() {
    docker_service "$0" "docker run -d \
      --restart=always \
      -p 54:53/udp \
      -v /var/run/docker.sock:/var/run/docker.sock \
      --name \"$0\" \
      jderusse/dns-gen -R" $@
}

redis-cli() {
    docker run -it --rm \
        --name "$0" \
        redis:latest \
        redis-cli $@
}
